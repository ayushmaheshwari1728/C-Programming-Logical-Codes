#include <stdio.h>
#include <stdlib.h>

struct listnode{
    
    int data;
    struct listnode *next;
};

typedef struct listnode list;

list* convert_octal_to_binary(list* head){
    
    list* head1=head;
    
    list* temp;
    
    while(head){
        
    list* a=(list *)malloc(sizeof(list));
    list* b=(list *)malloc(sizeof(list));
    a->next=b;
    b->next=head->next;
    
    if(head->data == 0){
        head->data=0;
        a->data=0;
        b->data=0;
    }
    
    else if(head->data == 1){
        head->data=0;
        a->data=0;
        b->data=1;
    }
    
    else if(head->data == 2){
        head->data=0;
        a->data=1;
        b->data=0;
    }
    
    else if(head->data == 3){
        head->data=0;
        a->data=1;
        b->data=1;
    }
    
    else if(head->data == 4){
        head->data=1;
        a->data=0;
        b->data=0;
    }
    
    else if(head->data == 5){
        head->data=1;
        a->data=0;
        b->data=1;
    }
    
    else if(head->data == 6){
        head->data=1;
        a->data=1;
        b->data=0;
    }
    
    else if(head->data == 7){
        head->data=1;
        a->data=1;
        b->data=1;
    }
    
    temp=head->next;
    head->next=a;
    head=temp;
    
    }
    
   return head1; 
   
}




int main()
{
    //sample linked list
    list *head=(list *)malloc(sizeof(list));
    head->data=1;
    head->next=(list *)malloc(sizeof(list));
    head->next->data=2;
    head->next->next=(list *)malloc(sizeof(list));
    head->next->next->data=3;
    head->next->next->next=(list *)malloc(sizeof(list));
    head->next->next->next->data=4;
    head->next->next->next->next=NULL;
    
    
    
    list* result=convert_octal_to_binary(head);
    
    
    printf("After Binary Conversion \n");
    while(result){
         printf("%d ",result->data);
         result=result->next;
    }
   

    return 0;
}
